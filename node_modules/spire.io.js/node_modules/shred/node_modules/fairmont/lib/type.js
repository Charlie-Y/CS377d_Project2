// Generated by CoffeeScript 1.9.2
(function() {
  var assert, curry, deep_equal, describe, ref, ref1;

  ref = require("./core"), curry = ref.curry, deep_equal = ref.deep_equal;

  ref1 = require("./helpers"), describe = ref1.describe, assert = ref1.assert;

  describe("Type functions", function(context) {
    var instance_of, is_array, is_boolean, is_date, is_float, is_function, is_generator, is_integer, is_number, is_object, is_regexp, is_string, is_type, is_value, type;
    type = function(x) {
      return Object.prototype.toString.call(x).slice(8, -1).toLowerCase();
    };
    context.test("type");
    is_type = curry(function(t, x) {
      return type(x) === t;
    });
    context.test("is_type");
    instance_of = curry(function(t, x) {
      return x instanceof t;
    });
    context.test("instance_of");
    is_number = function(n) {
      return n === +n;
    };
    context.test("is_number", function() {
      assert(is_number(7));
      assert(!is_number("7"));
      return assert(!is_number(false));
    });
    is_integer = function(n) {
      return n === +n && n === (n | 0);
    };
    context.test("is_integer", function() {
      assert(is_integer(5));
      assert(!is_integer(3.5));
      assert(!is_integer("5"));
      return assert(!is_integer(NaN));
    });
    is_float = function(n) {
      return n === +n && n !== (n | 0);
    };
    context.test("is_float", function() {
      assert(is_float(3.5));
      assert(!is_float(5));
      assert(!is_float("3.5"));
      return assert(!is_float(NaN));
    });
    is_boolean = is_type("boolean");
    context.test("is_boolean", function() {
      assert(is_boolean(true));
      return assert(!is_boolean(7));
    });
    is_date = is_type("date");
    context.test("is_date", function() {
      assert(is_date(new Date));
      return assert(!is_date(7));
    });
    is_regexp = is_type("regexp");
    context.test("is_regexp", function() {
      assert(is_regexp(/\s/));
      return assert(!is_regexp(7));
    });
    is_string = is_type("string");
    context.test("is_string", function() {
      assert(is_string("x"));
      return assert(!is_string(7));
    });
    is_function = is_type("function");
    context.test("is_function", function() {
      assert(is_function(function() {}));
      return assert(!is_function(7));
    });
    is_generator = function(x) {
      return x.constructor.name === "GeneratorFunction";
    };
    context.test("is_generator", function() {
      var f;
      f = function*() {
        return (yield true);
      };
      return assert(is_generator(f));
    });
    is_object = is_type("object");
    context.test("is_object", function() {
      assert(is_object({}));
      return assert(!is_object(7));
    });
    is_array = is_type("array");
    context.test("is_array", function() {
      assert(is_array([]));
      return assert(!is_array(7));
    });
    is_value = function(x) {
      return x != null;
    };
    context.test("is_value", function() {
      assert(is_value({}));
      return assert(!is_value(void 0));
    });
    return module.exports = {
      deep_equal: deep_equal,
      type: type,
      is_type: is_type,
      instance_of: instance_of,
      is_boolean: is_boolean,
      is_number: is_number,
      is_string: is_string,
      is_function: is_function,
      is_generator: is_generator,
      is_object: is_object,
      is_array: is_array,
      is_value: is_value
    };
  });

}).call(this);
