{
  "name": "spire.io.js",
  "version": "1.2.8",
  "description": "A JS client for spire.io messaging API.  Runs in node and the browser.",
  "keywords": [
    "messaging",
    "spire",
    "spire.io",
    "browser"
  ],
  "homepage": "https://github.com/spire-io/spire.io.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/spire-io/spire.io.js"
  },
  "bugs": {
    "url": "https://github.com/spire-io/spire.io.js/issues"
  },
  "contributors": [
    {
      "name": "Nicolas LaCasse",
      "email": "nlacasse@spire.io"
    },
    {
      "name": "Jason Campbell",
      "email": "jason@spire.io"
    },
    {
      "name": "Vicent Piquer Suria",
      "email": "vsuria@spire.io"
    }
  ],
  "main": "./lib/spire.io.js",
  "directories": {
    "docs": "./docs",
    "lib": "./lib",
    "test": "./test"
  },
  "dependencies": {
    "shred": ">= 0.8.3",
    "underscore": "1.3.1",
    "async": "0.1.15"
  },
  "devDependencies": {
    "express": "2.5.10",
    "browserify": "1.8.3",
    "http-browserify": "https://github.com/spire-io/http-browserify/tarball/master",
    "uglify-js": "1.1.1",
    "noc": "1.0.1",
    "gitio": "1.0.1",
    "colors": "0.6.0",
    "jasmine-node": "1.0.17",
    "glob": "3.0.1"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/spire-io/jquery.spire.js/blob/master/README.md"
    }
  ],
  "readme": "# Synopsis\n\n`spire.io.js` is a javascript library for the [spire.io API](http://www.spire.io/).\nIt can run inside the browser, or as NodeJS module.\n\n## Usage\n### Browser usage:\nAdd `spire.io.bundle.js` or `spire.io.bundle.min.js` to your script tags, and then\n\n    var Spire = require('./spire.io.js');\n\n### NodeJS usage:\n\n    npm install spire.io.js\n    var Spire = require('spire.io.js');\n\n### Starting the Spire client\n\nCreate a new Spire instance:\n\n    var spire = new Spire();\n\nRegister a new spire account:\n\n    spire.register({\n      email: 'you@email.com',\n      password: your_password,\n      password_confirmation: your_password_confirmation\n    }, function (err, session) {\n      if (!err) {\n        // Your account has been registered, and you now have a spire session\n      }\n    });\n\nOr start spire with an account secret:\n\n    spire.start(your_account_secret, function (err, session) {\n      if (!err, session) {\n        // You now have a Spire session\n      }\n    });\n\nOnce Spire is started, you can start subscribing and publishing to channels.\n\n### Subscribe to a Channel\n\nSubscribe to a channel:\n\n    spire.session.subscribe('channel name', function (messages) {\n      for (var i = 0; i < messages.length; i++) {\n        console.log(\"Received message: \" + messages[i].content);\n      }\n    });\n\nSubscribe to multiple channels:\n\n    spire.session.subscribe(['channel one', 'channel two'], function (messages) {\n      for (var i = 0; i < messages.length; i++) {\n        console.log(\"Received message from channel \" +\n          messages[i].channel + \": \" + messages[i].content);\n      }\n    });\n\nBy default, the `spire.session.subscribe` method will return all channel events starting with the very first event.\nIf you only want to listen for events from this point forward, pass `last: 'now'` as an option:\n\n\nSubscribe to a channel, and only listen for new events:\n\n    spire.session.subscribe('channel name', { last: 'now' }, function (messages) {\n      for (var i = 0; i < messages.length; i++) {\n        console.log(\"Received message: \" + messages[i].content);\n      }\n    });\n\n\n### Publish to a Channel\n\nPublish to a channel:\n\n    // 'message' can be a string or any JSON-serilazable object.\n    spire.session.publish('channel name', message, function (err) {\n      if (!err) {\n        console.log('Message sent!');\n      }\n    });\n\n## Identity API\n\nYou can use the spire.io Identity API for secure serverless apps.\n\nThe Identity API lets you create applications:\n\n    // Create a new application.\n    var applicationName = \"my-application\";\n    spire.session.createApplication(applicationName, function (err, application) {\n      if (!err) {\n        // `application` is your new application\n      }\n    });\n\n\nOnce you have created an application, clients can create new members, or authenticate existing members with needing a session or any priveledged information.\n\nStart by getting the application:\n\n    // Get an application from the application key.\n    var myApplicationKey = \"application-key\";\n    spire.getApplication(myApplicationKey, function (err, application) {\n      if (!err) {\n        // `application` is an application object\n      }\n    });\n\nCreate a new member:\n\n    // Create a new member for myApplication.\n    // `myApplication` is an application object.\n    var login = \"foo\";\n    var password = \"bar\";\n    myApplication.createMember(login, password, function (err, member) {\n      if (!err) {\n        // `member` is a member object\n      }\n    });\n\n\nAuthenticate an existing member:\n\n    // Authenticate a member for myApplication\n    // `myApplication` is an application object.\n    var login = \"foo\";\n    var password = \"bar\";\n    myApplication.authenticateMember(login, password, function (err, member) {\n      if (!err) {\n        // `member` is a member object\n      }\n    });\n\n\nFor more on applications and the Identity API, see the [identity topic guide](http://www.spire.io/docs/topic-guides/identity.html) or the [tuturial for a secure serverless app](http://www.spire.io/docs/tutorials/simple-chat.html).\n\n## Advanced Usage\n\nThe `subscribe` and `publish` methods wrap a lot of low-level functionality.\nThe Spire library provides access to many low-level methods to make more advanced applications possible.\n\nAlso be sure to checkout the [reference documentation](http://spire-io.github.com/spire.io.js).\n\n### Channels\n\nCreate a channel:\n\n    spire.session.createChannel('foo', function (err, channel) {\n      if (!err) {\n        // `channel` is the channel named \"foo\".\n        var fooChannel = channel;\n      }\n    });\n\n\nPublish to a channel:\n\n    fooChannel.publish('Hello World!', function (err, message) {\n      if (!err) {\n        // Message was successfully published.\n      }\n    });\n\n### Subscriptions\n\nCreate a subscription to a channel:\n\n    fooChannel.subscription('mySubscription', function (err, subscription) {\n      if (!err) {\n        // `subscription` is the new subscription resource\n        var mySubscription = subscription;\n      }\n    });\n\nor equivalently:\n\n    spire.session.createSubscription({\n      name: 'mySubscripiton',\n      channelNames: ['foo']\n    }, function (err, subscription) {\n      if (!err) {\n        // `subscription` is the new subscription resource\n        var mySubscription = subscription;\n      }\n    });\n\nYou can also use the `findOrCreateSubscription` method, which will return an existing subscription if it already exists, otherwise it will create a new one.\n\n    spire.session.findOrCreateSubscription({\n      name: 'mySubscripiton',\n      channelNames: ['foo']\n    }, function (err, subscription) {\n      if (!err) {\n        // `subscription` is the new subscription resource\n        var mySubscription = subscription;\n      }\n    });\n\n\n### Listening on a subscription\n\nSubscriptions have three basic kinds of events:\n\n    * `message` events are messages that were published to the channel,\n    * `join` events are created when a new subscription is added to the channel, and\n    * `part` events are created when a subscription is deleted or expires.\n\nHere are examples of all three kinds of event listeners:\n\n    mySubscription.addListener('message', function (message) {\n      console.log('Message received: ' + message.content);\n    });\n\n    mySubscription.addListener('join', function (join) {\n      console.log('Subscription joined: ' + join.subscription_name);\n    });\n\n    mySubscription.addListener('part', function (part) {\n      console.log('Subscription parted: ' + part.subscription_name);\n    });\n\nTo start listening on a subscription, call:\n\n    mySubscription.startListening();\n\nYou can pass options to `startListening`.\nFor example, if you only want to listen for new messages (and ignore all messages that have already been sent), pass in `last: 'now'`:\n\n    mySubscription.startListening({ last: 'now' });\n\nTo stop listening on a subscription, call:\n\n    mySubscription.stopListening();\n\n\n## Reference Documentation\n\nFor more docs, see our [reference documentation](http://spire-io.github.com/spire.io.js).\n\n## Tests\n\nThe test suite can be run in NodeJS via:\n\n    cake test:node\n\nTo run the test suite in the browser, you first need to start the test server with:\n\n    cake test:server\n\nthen connect to the server's homepage.\n\nIf you don't know about cake and Cakefiles head on over to the CoffeeScript site (Don't worry this plugin isn't written in CoffeScript nor do you need it for anything other than running the development tasks)\n\n## Bundle\n\nSo you made some changes and want to make a new browser bundle?\n\n    cake bundle\n\nWant to bundle *and* minify?\n\n    cake bundle:min\n\n## Debugging with cURL output\n\nThe Spire library can log all requests as [cURL][curl] commands.\nThis is useful for debugging requests from the console.\n\nTo enable cURL logging, set the \"logCurl\" option to `true` when initializing Spire:\n\n    var spire = new Spire({ logCurl: true });\n\nSample output will look like this:\n\n    curl -X GET http://localhost:1337 -H \"Accept: application/json\"\n\n# Contributing\n\nFork and send pull requests via github, also any [issues](https://github.com/spire-io/spire.io.js/issues) are always welcome\n\n# License\n\nOpen Source Initiative OSI - The MIT License (MIT):Licensing\n\nThe MIT License (MIT)spec\nCopyright (c) 2011, 2012 Border Stylo\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n[curl]: http://curl.haxx.se/\n",
  "_id": "spire.io.js@1.2.8",
  "dist": {
    "shasum": "96a5d149aa9c37901c1239861655c3f707eb8f23",
    "tarball": "http://registry.npmjs.org/spire.io.js/-/spire.io.js-1.2.8.tgz"
  },
  "maintainers": [
    {
      "name": "nlacasse",
      "email": "nlacasse@borderstylo.com"
    }
  ],
  "_shasum": "96a5d149aa9c37901c1239861655c3f707eb8f23",
  "_from": "spire.io.js@",
  "_resolved": "https://registry.npmjs.org/spire.io.js/-/spire.io.js-1.2.8.tgz"
}
